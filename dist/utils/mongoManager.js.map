{"version":3,"sources":["../../server/utils/mongoManager.js"],"names":["config","mongo","require","MongoDBManager","host","port","dbName","options","native_parser","db","name","bind","collection","query","resolve","reject","setCollection","insert","err","result","findOne","item","console","log","manager"],"mappings":";;;;;;;;;;;;;;;;;;AAGA;;IAAYA,M;;;;;;AAEZ,IAAIC,QAAQC,QAAQ,WAAR,CAAZ;;IAEMC,c;AACF,4BAAYC,IAAZ,EAA0BC,IAA1B,EAAwCC,MAAxC,EAAmE;AAAA;;AAAA,0CAARC,OAAQ;AAARA,mBAAQ;AAAA;;AAC/DA,gBAAQC,aAAR,GAAwB,IAAxB;AACA,aAAKJ,IAAL,GAAYA,IAAZ;AACA,aAAKC,IAAL,GAAYA,IAAZ;AACA,aAAKC,MAAL,GAAcA,MAAd;;AAEA,aAAKG,EAAL,GAAUR,MAAMQ,EAAN,gBAAsBL,IAAtB,SAA8BC,IAA9B,SAAsCC,MAAtC,EAAgDC,OAAhD,CAAV;AAEH;;;;sCAEaG,I,EAAa;AACvB,mBAAO,KAAKD,EAAL,CAAQE,IAAR,CAAaD,IAAb,CAAP;AACH;;;+BAEME,U,EAAoBC,K,EAA6C;AAAA,+CAAzBN,OAAyB;AAAzBA,uBAAyB;AAAA;;AAAA;;AACpE,mBAAO,sBAAY,UAACO,OAAD,EAAUC,MAAV,EAAqB;AACpC,sBAAKC,aAAL,CAAmBJ,UAAnB;AACA,sBAAKH,EAAL,CAAQG,UAAR,EAAoBK,MAApB,CAA2BJ,KAA3B,EAAkCN,OAAlC,EAA2C,UAACW,GAAD,EAAMC,MAAN,EAAiB;AACxD,wBAAGD,GAAH,EAAO;AACHH,+BAAOG,GAAP;AACH,qBAFD,MAEK;AACDJ,gCAAQK,MAAR;AACH;AACJ,iBAND;AAOH,aATM,CAAP;AAUH;;;gCAEOP,U,EAAoBC,K,EAAeN,O,EAAiC;AAAA;;AACxE,mBAAO,sBAAY,UAACO,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAKC,aAAL,CAAmBJ,UAAnB;AACA,uBAAKH,EAAL,CAAQG,UAAR,EAAoBQ,OAApB,CAA4BP,KAA5B,EAAmCN,OAAnC,EAA4C,UAACW,GAAD,EAAMG,IAAN,EAAe;AACvDC,4BAAQC,GAAR,CAAYL,GAAZ,EAAiBG,IAAjB;AACA,wBAAGH,GAAH,EAAO;AACHH,+BAAOG,GAAP;AACH,qBAFD,MAEK;AACDJ,gCAAQO,IAAR;AACH;AACJ,iBAPD;AAQH,aAVM,CAAP;AAWH;;;;;AAGL,IAAMG,UAAU,IAAIrB,cAAJ,CAAmBH,OAAOI,IAA1B,EAAgCJ,OAAOK,IAAvC,EAA6CL,OAAOM,MAApD,CAAhB;;kBAEekB,O","file":"mongoManager.js","sourcesContent":["/**\n * @flow\n */\nimport * as config from '../config';\n\nvar mongo = require('mongoskin');\n\nclass MongoDBManager {\n    constructor(host: string, port: string, dbName: string, ...options){\n        options.native_parser = true;\n        this.host = host;\n        this.port = port;\n        this.dbName = dbName;\n\n        this.db = mongo.db(`mongodb://${host}:${port}/${dbName}`, options);\n\n    }\n\n    setCollection(name: string){\n        return this.db.bind(name); \n    }\n\n    insert(collection: string, query: ? object, ...options): Promise<Object>{\n        return new Promise((resolve, reject) => {\n            this.setCollection(collection);\n            this.db[collection].insert(query, options, (err, result) => {\n                if(err){\n                    reject(err);\n                }else{\n                    resolve(result);\n                }\n            });\n        });\n    }\n\n    findOne(collection: string, query: Object, options: Object): Promise<Object>{\n        return new Promise((resolve, reject) => {\n            this.setCollection(collection);\n            this.db[collection].findOne(query, options, (err, item) => {\n                console.log(err, item);\n                if(err){\n                    reject(err);\n                }else{\n                    resolve(item);\n                }\n            });\n        });\n    }\n}\n\nconst manager = new MongoDBManager(config.host, config.port, config.dbName);\n\nexport default manager;"]}