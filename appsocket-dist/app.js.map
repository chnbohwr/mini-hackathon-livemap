{"version":3,"sources":["../appsocket/app.js"],"names":["randomstring","require","app","http","Server","io","compiler","process","env","DEV","use","urlencoded","json","get","noInfo","publicPath","output","rooms","users","req","res","sendFile","__dirname","express","static","join","DisconnectRoom","socket","roomId","id","targetRoom","find","room","leave","checkRoomId","checkReq","isUndefined","isEmpty","resp","error","success","status","message","roomClass","params","_MAX","_ID","_MEMBERS","user","resolve","reject","map","u","Error","push","remove","member","user_count","on","data","emit","uid","console","log","roomID","generate","roomTitle","checkResult","addMember","then","catch","removeMember","to","next","port","PORT","listen","err"],"mappings":";;;;;;;;;;;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,eAAeC,QAAQ,cAAR,CAArB;;AAEA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,OAAO,eAAWC,MAAX,CAAkBF,GAAlB,CAAb;AACA,IAAMG,KAAK,sBAASF,IAAT,CAAX;AACA,IAAMG,WAAW,kDAAjB;;AAEA,IAAIC,QAAQC,GAAR,CAAYC,GAAZ,KAAoB,MAAxB,EAAgC;AAC5BP,QAAIQ,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACH;;AAEDR,IAAIQ,GAAJ,CAAQ,qBAAWC,UAAX,EAAR;AACAT,IAAIQ,GAAJ,CAAQ,kCAAR;AACAR,IAAIQ,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAEA,IAAIV,IAAIW,GAAJ,CAAQ,KAAR,MAAmB,aAAvB,EAAsC;AAClCX,QAAIQ,GAAJ,CAAQT,QAAQ,wBAAR,EAAkCK,QAAlC,EAA4C;AAChDQ,gBAAQ,IADwC;AAEhDC,oBAAY,2BAAOC,MAAP,CAAcD;AAFsB,KAA5C,CAAR;;AAKAb,QAAIQ,GAAJ,CAAQT,QAAQ,wBAAR,EAAkCK,QAAlC,CAAR;AACH;AACDJ,IAAIQ,GAAJ,CAAQ,QAAR,EAAkB,kBAAQO,KAA1B;AACAf,IAAIQ,GAAJ,CAAQ,QAAR,EAAkB,kBAAQQ,KAA1B;;AAEAhB,IAAIW,GAAJ,CAAQ,WAAR,EAAqB,UAAUM,GAAV,EAAeC,GAAf,EAAoB;AACrCA,QAAIC,QAAJ,CAAaC,YAAY,aAAzB;AACH,CAFD;;AAIApB,IAAIQ,GAAJ,CAAQa,QAAQC,MAAR,CAAe,eAAKC,IAAL,CAAUH,SAAV,EAAqB,KAArB,CAAf,CAAR;;AAEApB,IAAIW,GAAJ,CAAQ,GAAR,EAAa,UAAUM,GAAV,EAAeC,GAAf,EAAoB;AAC7BA,QAAIC,QAAJ,CAAa,eAAKI,IAAL,CAAUH,SAAV,EAAqB,mBAArB,CAAb;AACH,CAFD;;AAIA,SAASI,cAAT,CAAwBT,KAAxB,EAA+BU,MAA/B,EAAuC;AACnC,QAAMC,SAASD,OAAOE,EAAtB;;AAEA,QAAIC,aAAa,iBAAEC,IAAF,CAAOd,KAAP,EAAc,UAACe,IAAD,EAAU;AACrC,eAAOA,KAAKH,EAAL,KAAYD,MAAnB;AACH,KAFgB,CAAjB;AAGAD,WAAOM,KAAP,CAAaH,WAAWD,EAAxB;AACH;;AAED,SAASK,WAAT,CAAqBjB,KAArB,EAA4BW,MAA5B,EAAoC;AAChC,QAAIO,WAAW,iBAAEC,WAAF,CAAcR,MAAd,KAAyB,iBAAES,OAAF,CAAUT,MAAV,CAAxC;AAAA,QACIU,OAAO;AACHC,eAAO,IADJ;AAEHC,iBAAS;AAFN,KADX;;AAMA,QAAIV,aAAa,iBAAEC,IAAF,CAAOd,KAAP,EAAc,UAACe,IAAD,EAAU;AACrC,eAAOA,KAAKH,EAAL,KAAYD,MAAnB;AACH,KAFgB,CAAjB;;AAIA,QAAIO,QAAJ,EAAc;AACVG,aAAKC,KAAL,GAAa;AACTE,oBAAQ,GADC;AAETC,qBAAS;AAFA,SAAb;AAIH,KALD,MAKO,IAAI,iBAAEN,WAAF,CAAcN,UAAd,CAAJ,EAA+B;AAClCQ,aAAKC,KAAL,GAAa;AACTE,oBAAQ,GADC;AAETC,qBAAS;AAFA,SAAb;AAIH,KALM,MAKA;AACHJ,aAAKE,OAAL,GAAe,IAAf;AACAF,aAAKR,UAAL,GAAkBA,UAAlB;AACH;;AAED,WAAOQ,IAAP;AACH;;IAEKK,S;AACF,uBAAYC,MAAZ,EAAoB;AAAA;;;AAEhB,aAAKC,IAAL,GAAY,CAAZ;AACA,aAAKC,GAAL,GAAWF,OAAOf,EAAlB;AACA,aAAKkB,QAAL,GAAgB,EAAhB;AAEH;;;;kCAMSC,I,EAAM;AAAA;;AACZ,mBAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIX,QAAQ,IAAZ;AACA,sBAAKQ,QAAL,CAAcI,GAAd,CAAkB,aAAK;AACnB,wBAAIC,EAAEvB,EAAF,KAASmB,KAAKnB,EAAlB,EAAsB;AAClBqB,+BAAO,IAAIG,KAAJ,CAAU,QAAV,CAAP;AACH;AACJ,iBAJD;AAKA,sBAAKN,QAAL,CAAcO,IAAd,CAAmBN,IAAnB;;AAEAC;AACH,aAVM,CAAP;AAWH;;;qCAEYD,I,EAAM;AACf,gBAAIT,QAAQ,IAAZ;;AAEA,mBAAO,iBAAEgB,MAAF,CAAS,KAAKR,QAAd,EAAwB,UAACS,MAAD,EAAY;AACvC,uBAAOA,OAAO3B,EAAP,KAAcmB,KAAKnB,EAA1B;AACH,aAFM,CAAP;AAGH;;;4BAxBQ;AACL,mBAAO,KAAKiB,GAAZ;AACH;;;;;AAyBL,IAAI7B,QAAQ,EAAZ;;AAGA,IAAIwC,aAAa,CAAjB;;AAEA;AACApD,GAAGqD,EAAH,CAAM,YAAN,EAAoB,UAAU/B,MAAV,EAAkB;;AAElCA,WAAO+B,EAAP,CAAU,cAAV,EAA0B,UAAUC,IAAV,EAAgB;AACtC;AACA;AACAtD,WAAGuD,IAAH,CAAQ,eAAR,EAAyBD,IAAzB;AACH,KAJD;;AAMA;AACAhC,WAAOiC,IAAP,CAAY,QAAZ,EAAsB;AAClBC,aAAKlC,OAAOE;AADM,KAAtB;;AAIA;AACAF,WAAO+B,EAAP,CAAU,YAAV,EAAwB,UAACC,IAAD,EAAU;AAC9BG,gBAAQC,GAAR,CAAYJ,IAAZ;AACA,YAAMK,SAAShE,aAAaiE,QAAb,EAAf;AACA,YAAMrB,SAAS;AACXf,gBAAImC,MADO;AAEXE,uBAAWA;AAFA,SAAf;;AAKA,YAAMlC,OAAO,IAAIW,SAAJ,CAAcC,MAAd,CAAb;AACA3B,cAAMqC,IAAN,CAAWtB,IAAX;AACAL,eAAOiC,IAAP,CAAY,SAAZ,EAAuB;AACnBnB,oBAAQ,GADW;AAEnBb,oBAAQI,KAAKH,EAFM;AAGnBa,kDAAgBV,KAAKH,EAArB;AAHmB,SAAvB;AAKH,KAfD;;AAiBA;AACAF,WAAO+B,EAAP,CAAU,UAAV,EAAsB,UAACvC,GAAD,EAAS;AAC3B,YAAMgD,cAAcjC,YAAYjB,KAAZ,EAAmBE,IAAIS,MAAvB,CAApB;;AAEA,YAAIuC,YAAY5B,KAAhB,EAAuB;AACnBZ,mBAAOiC,IAAP,CAAY,aAAZ,EAA2BO,YAAY5B,KAAvC;AACH,SAFD,MAEO;;AAEH4B,wBAAYrC,UAAZ,CAAuBsC,SAAvB,CAAiCzC,MAAjC,EACK0C,IADL,CACU,YAAM;AACR1C,uBAAOF,IAAP,CAAYN,IAAIS,MAAhB;;AAEAD,uBAAOiC,IAAP,CAAY,SAAZ,EAAuB;AACnBnB,4BAAQ,GADW;AAEnBC,oDAAef,OAAOE,EAAtB;AAFmB,iBAAvB;AAIH,aARL,EAQOyC,KARP,CAQa,iBAAS;AACd3C,uBAAOiC,IAAP,CAAY,OAAZ,EAAqB;AACjBnB,4BAAQ,GADS;AAEjBC,6BAASH,MAAMG;AAFE,iBAArB;AAIH,aAbL;AAcH;AACJ,KAtBD;;AAwBA;AACAf,WAAO+B,EAAP,CAAU,WAAV,EAAuB,UAACvC,GAAD,EAAS;;AAE5B,YAAMgD,cAAcjC,YAAYjB,KAAZ,EAAmBE,IAAIS,MAAvB,CAApB;;AAEA,YAAIuC,YAAY5B,KAAhB,EAAuB;AACnBZ,mBAAOiC,IAAP,CAAY,aAAZ,EAA2BO,YAAY5B,KAAvC;AACH,SAFD,MAEO;AACH4B,wBAAYrC,UAAZ,CAAuByC,YAAvB,CAAoC5C,MAApC;AACAA,mBAAOM,KAAP,CAAad,IAAIS,MAAjB;AACAD,mBAAOiC,IAAP,CAAY,SAAZ,EAAuB;AACnBnB,wBAAQ,GADW;AAEnBC,yBAAYf,OAAOE,EAAnB;AAFmB,aAAvB;AAIH;AACJ,KAdD;AAeA;;AAEAF,WAAO+B,EAAP,CAAU,cAAV,EAA0B,UAACvC,GAAD,EAAS;;AAE/B,YAAMgD,cAAcjC,YAAYjB,KAAZ,EAAmBE,IAAIS,MAAvB,CAApB;;AAEA,YAAIuC,YAAY5B,KAAhB,EAAuB;AACnBZ,mBAAOiC,IAAP,CAAY,aAAZ,EAA2BO,YAAY5B,KAAvC;AACH,SAFD,MAEO;AACHlC,eAAGmE,EAAH,CAAMrD,IAAIS,MAAV,EAAkBgC,IAAlB,CAAuB,cAAvB,EAAuCzC,IAAIyB,MAA3C;AACH;AACJ,KATD;;AAWA;;AAEAjB,WAAO+B,EAAP,CAAU,eAAV,EAA2B,UAACvC,GAAD,EAAS;AAChCd,WAAGuD,IAAH,CAAQ,eAAR,EAAyBzC,IAAIyB,MAA7B;AACH,KAFD;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGH,CApGD;;AAsGA;AACA1C,IAAIQ,GAAJ,CAAQ,UAAC6B,KAAD,EAAQpB,GAAR,EAAaC,GAAb,EAAkBqD,IAAlB,EAA2B;AAC/B,QAAMhC,SAASF,MAAME,MAAN,IAAgB,GAA/B;AACArB,QAAIqB,MAAJ,CAAWA,MAAX,EAAmB7B,IAAnB,CAAwB;AACpB8B,iBAASH,MAAMG;AADK,KAAxB;AAGH,CALD;;AAQA,IAAIgC,OAAOnE,QAAQC,GAAR,CAAYmE,IAAZ,IAAoB,IAA/B;AACA;AACAxE,KAAKyE,MAAL,CAAYF,IAAZ,EAAkB,YAAY;AAC1BZ,YAAQC,GAAR,CAAY,iBAAZ,EAA+BW,IAA/B;AACH,CAFD;;AAIA;AACAnE,QAAQmD,EAAR,CAAW,mBAAX,EAAgC,UAAUmB,GAAV,EAAe;AAC3Cf,YAAQC,GAAR,CAAYc,GAAZ;AACH,CAFD","file":"app.js","sourcesContent":["/**\n * @flow\n */\nimport Express from 'express';\nimport httpModule from 'http';\nimport socketIO from 'socket.io';\nimport cors from 'cors';\nimport multipartyMiddleware from 'connect-multiparty';\nimport bodyParser from 'body-parser';\nimport _ from 'lodash';\nimport logger from 'morgan';\nimport routers from './routers';\nimport path from 'path';\nimport webpack from 'webpack';\nimport config from '../webpack-dev-server.config';\n\nconst randomstring = require(\"randomstring\");\n\nconst app = Express();\nconst http = httpModule.Server(app);\nconst io = socketIO(http);\nconst compiler = webpack(config);\n\nif (process.env.DEV === 'true') {\n    app.use(logger('dev'));\n}\n\napp.use(bodyParser.urlencoded());\napp.use(multipartyMiddleware());\napp.use(bodyParser.json())\n\nif (app.get('env') === 'development') {\n    app.use(require('webpack-dev-middleware')(compiler, {\n        noInfo: true,\n        publicPath: config.output.publicPath\n    }));\n\n    app.use(require('webpack-hot-middleware')(compiler));\n}\napp.use('/rooms', routers.rooms);\napp.use('/users', routers.users);\n\napp.get('/chatroom', function (req, res) {\n    res.sendFile(__dirname + '/index.html');\n});\n\napp.use(express.static(path.join(__dirname, '../')));\n\napp.get('/', function (req, res) {\n    res.sendFile(path.join(__dirname, '../app/index.html'));\n});\n\nfunction DisconnectRoom(rooms, socket) {\n    const roomId = socket.id;\n\n    let targetRoom = _.find(rooms, (room) => {\n        return room.id === roomId;\n    });\n    socket.leave(targetRoom.id);\n}\n\nfunction checkRoomId(rooms, roomId) {\n    let checkReq = _.isUndefined(roomId) || _.isEmpty(roomId),\n        resp = {\n            error: null,\n            success: false\n        };\n\n    let targetRoom = _.find(rooms, (room) => {\n        return room.id === roomId;\n    });\n\n    if (checkReq) {\n        resp.error = {\n            status: 404,\n            message: 'roomId 不可為空'\n        };\n    } else if (_.isUndefined(targetRoom)) {\n        resp.error = {\n            status: 404,\n            message: '房間不存在'\n        };\n    } else {\n        resp.success = true;\n        resp.targetRoom = targetRoom;\n    }\n\n    return resp;\n}\n\nclass roomClass {\n    constructor(params) {\n\n        this._MAX = 8;\n        this._ID = params.id;\n        this._MEMBERS = [];\n\n    }\n\n    get id() {\n        return this._ID;\n    }\n\n    addMember(user) {\n        return new Promise((resolve, reject) => {\n            let error = null;\n            this._MEMBERS.map(u => {\n                if (u.id === user.id) {\n                    reject(new Error('使用者已存在'));\n                }\n            });\n            this._MEMBERS.push(user);\n\n            resolve();\n        });\n    }\n\n    removeMember(user) {\n        let error = null;\n\n        return _.remove(this._MEMBERS, (member) => {\n            return member.id === user.id;\n        });\n    }\n}\n\nlet rooms = [];\n\n\nvar user_count = 0;\n\n//當新的使用者連接進來的時候\nio.on('connection', function (socket) {\n\n    socket.on('chat message', function (data) {\n        //console.log(data);\n        //appendMessage(data.username+\":\"+data.msg);\n        io.emit('globalmessage', data);\n    });\n\n    //回傳個人的socket.id\n    socket.emit('getuid', {\n        uid: socket.id\n    });\n\n    // TODO 建立房間\n    socket.on('createroom', (data) => {\n        console.log(data);\n        const roomID = randomstring.generate();\n        const params = {\n            id: roomID,\n            roomTitle: roomTitle\n        };\n\n        const room = new roomClass(params);\n        rooms.push(room);\n        socket.emit('success', {\n            status: 200,\n            roomId: room.id,\n            message: `建立房間${room.id}成功`\n        });\n    });\n\n    // TODO 加入房間\n    socket.on('joinroom', (req) => {\n        const checkResult = checkRoomId(rooms, req.roomId);\n\n        if (checkResult.error) {\n            socket.emit('errorStatus', checkResult.error);\n        } else {\n\n            checkResult.targetRoom.addMember(socket)\n                .then(() => {\n                    socket.join(req.roomId);\n\n                    socket.emit('success', {\n                        status: 200,\n                        message: `使用者${socket.id}已加入成功`\n                    });\n                }).catch(error => {\n                    socket.emit('error', {\n                        status: 404,\n                        message: error.message\n                    });\n                });\n        }\n    });\n\n    // TODO 離開房間\n    socket.on('leaveroom', (req) => {\n\n        const checkResult = checkRoomId(rooms, req.roomId);\n\n        if (checkResult.error) {\n            socket.emit('errorStatus', checkResult.error);\n        } else {\n            checkResult.targetRoom.removeMember(socket);\n            socket.leave(req.roomId);\n            socket.emit('success', {\n                status: 200,\n                message: `${socket.id}已經離開房間`\n            });\n        }\n    });\n    // TODO 發送房間訊息\n\n    socket.on('localmessage', (req) => {\n\n        const checkResult = checkRoomId(rooms, req.roomId);\n\n        if (checkResult.error) {\n            socket.emit('errorStatus', checkResult.error);\n        } else {\n            io.to(req.roomId).emit('localmessage', req.params);\n        }\n    });\n\n    // TODO 發送全域訊息\n\n    socket.on('globalmessage', (req) => {\n        io.emit('globalmessage', req.params);\n    });\n\n    //left\n    // socket.on('disconnect', function () {\n    //     DisconnectRoom(rooms, socket.id);\n    //     io.emit('user left', {\n    //         username: socket.username\n    //     });\n    // });\n\n\n});\n\n//Error Handler\napp.use((error, req, res, next) => {\n    const status = error.status || 500;\n    res.status(status).json({\n        message: error.message\n    });\n});\n\n\nlet port = process.env.PORT || 3000;\n//指定port\nhttp.listen(port, function () {\n    console.log('listening on *:', port);\n});\n\n//Nodejs 奇怪的錯誤防止Process 死掉\nprocess.on('uncaughtException', function (err) {\n    console.log(err);\n})\n"]}